{"version":3,"sources":["../src/annyang.js"],"names":["root","factory","define","amd","annyang","module","exports","window","undefined","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","commandsList","recognition","callbacks","start","error","end","soundstart","result","resultMatch","resultNoMatch","errorNetwork","errorPermissionBlocked","errorPermissionDenied","autoRestart","lastStartedAt","autoRestartCount","debugState","debugStyle","pauseListening","isListening","optionalParam","optionalRegex","namedParam","splatParam","escapeRegExp","commandToRegExp","command","replace","match","optional","RegExp","invokeCallbacks","args","forEach","callback","apply","context","isInitialized","logMessage","text","extraParameters","indexOf","console","log","initIfNeeded","init","registerCommand","originalPhrase","push","parseResults","results","commandText","i","length","trim","j","l","currentCommand","exec","parameters","slice","commandResult","commands","resetCommands","abort","maxAlternatives","continuous","location","protocol","lang","onstart","onsoundstart","onerror","event","Date","getTime","onend","timeSinceLastStart","setTimeout","paused","onresult","SpeechRecognitionResult","resultIndex","k","transcript","addCommands","options","e","message","pause","resume","debug","newState","setLanguage","language","cb","phrase","hasOwnProperty","regexp","source","removeCommands","commandsToRemove","Array","isArray","filter","addCallback","type","removeCallback","compareWithCallbackParameter","callbackType","getSpeechRecognizer","trigger","sentences"],"mappings":"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","file":"annyang.js","sourcesContent":["//! annyang\r\n//! version : 2.6.0\r\n//! author  : Tal Ater @TalAter\r\n//! license : MIT\r\n//! https://www.TalAter.com/annyang/\r\n(function (root, factory) {\r\n  'use strict';\r\n  if (typeof define === 'function' && define.amd) { // AMD + global\r\n    define([], function () {\r\n      return (root.annyang = factory(root));\r\n    });\r\n  } else if (typeof module === 'object' && module.exports) { // CommonJS\r\n    module.exports = factory(root);\r\n  } else { // Browser globals\r\n    root.annyang = factory(root);\r\n  }\r\n}(typeof window !== 'undefined' ? window : this, function (root, undefined) {\r\n  'use strict';\r\n\r\n  /**\r\n   * # Quick Tutorial, Intro and Demos\r\n   *\r\n   * The quickest way to get started is to visit the [annyang homepage](https://www.talater.com/annyang/).\r\n   *\r\n   * For a more in-depth look at annyang, read on.\r\n   *\r\n   * # API Reference\r\n   */\r\n\r\n  var annyang;\r\n\r\n  // Get the SpeechRecognition object, while handling browser prefixes\r\n  var SpeechRecognition = root.SpeechRecognition ||\r\n                          root.webkitSpeechRecognition ||\r\n                          root.mozSpeechRecognition ||\r\n                          root.msSpeechRecognition ||\r\n                          root.oSpeechRecognition;\r\n\r\n  // Check browser support\r\n  // This is done as early as possible, to make it as fast as possible for unsupported browsers\r\n  if (!SpeechRecognition) {\r\n    return null;\r\n  }\r\n\r\n  var commandsList = [];\r\n  var recognition;\r\n  var callbacks = { start: [], error: [], end: [], soundstart: [], result: [], resultMatch: [], resultNoMatch: [], errorNetwork: [], errorPermissionBlocked: [], errorPermissionDenied: [] };\r\n  var autoRestart;\r\n  var lastStartedAt = 0;\r\n  var autoRestartCount = 0;\r\n  var debugState = false;\r\n  var debugStyle = 'font-weight: bold; color: #00f;';\r\n  var pauseListening = false;\r\n  var isListening = false;\r\n\r\n  // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\r\n  var optionalParam = /\\s*\\((.*?)\\)\\s*/g;\r\n  var optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\r\n  var namedParam    = /(\\(\\?)?:\\w+/g;\r\n  var splatParam    = /\\*\\w+/g;\r\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#]/g;\r\n  var commandToRegExp = function(command) {\r\n    command = command.replace(escapeRegExp, '\\\\$&')\r\n                  .replace(optionalParam, '(?:$1)?')\r\n                  .replace(namedParam, function(match, optional) {\r\n                    return optional ? match : '([^\\\\s]+)';\r\n                  })\r\n                  .replace(splatParam, '(.*?)')\r\n                  .replace(optionalRegex, '\\\\s*$1?\\\\s*');\r\n    return new RegExp('^' + command + '$', 'i');\r\n  };\r\n\r\n  // This method receives an array of callbacks to iterate over, and invokes each of them\r\n  var invokeCallbacks = function(callbacks, ...args) {\r\n    callbacks.forEach(function(callback) {\r\n      callback.callback.apply(callback.context, args);\r\n    });\r\n  };\r\n\r\n  var isInitialized = function() {\r\n    return recognition !== undefined;\r\n  };\r\n\r\n  // method for logging in developer console when debug mode is on\r\n  var logMessage = function(text, extraParameters) {\r\n    if (text.indexOf('%c') === -1 && !extraParameters) {\r\n      console.log(text);\r\n    } else {\r\n      console.log(text, extraParameters || debugStyle);\r\n    }\r\n  };\r\n\r\n  var initIfNeeded = function() {\r\n    if (!isInitialized()) {\r\n      annyang.init({}, false);\r\n    }\r\n  };\r\n\r\n  var registerCommand = function(command, callback, originalPhrase) {\r\n    commandsList.push({ command, callback, originalPhrase });\r\n    if (debugState) {\r\n      logMessage('Command successfully loaded: %c'+originalPhrase, debugStyle);\r\n    }\r\n  };\r\n\r\n  var parseResults = function(results) {\r\n    invokeCallbacks(callbacks.result, results);\r\n    var commandText;\r\n    // go over each of the 5 results and alternative results received (we've set maxAlternatives to 5 above)\r\n    for (let i = 0; i<results.length; i++) {\r\n      // the text recognized\r\n      commandText = results[i].trim();\r\n      if (debugState) {\r\n        logMessage('Speech recognized: %c'+commandText, debugStyle);\r\n      }\r\n\r\n      // try and match recognized text to one of the commands on the list\r\n      for (let j = 0, l = commandsList.length; j < l; j++) {\r\n        var currentCommand = commandsList[j];\r\n        var result = currentCommand.command.exec(commandText);\r\n        if (result) {\r\n          var parameters = result.slice(1);\r\n          if (debugState) {\r\n            logMessage('command matched: %c'+currentCommand.originalPhrase, debugStyle);\r\n            if (parameters.length) {\r\n              logMessage('with parameters', parameters);\r\n            }\r\n          }\r\n          // execute the matched command, treat it as handled if the handler does not return false\n          var commandResult = currentCommand.callback.apply(this, parameters);\n          if(commandResult !== false) {\n            invokeCallbacks(callbacks.resultMatch, commandText, currentCommand.originalPhrase, results);\n            return;\n          }\n        }\r\n      }\r\n    }\r\n    invokeCallbacks(callbacks.resultNoMatch, results);\r\n  };\r\n\r\n  annyang = {\r\n\r\n    /**\r\n     * Initialize annyang with a list of commands to recognize.\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * var commands = {'hello :name': helloFunction};\r\n     * var commands2 = {'hi': helloFunction};\r\n     *\r\n     * // initialize annyang, overwriting any previously added commands\r\n     * annyang.init(commands, true);\r\n     * // adds an additional command without removing the previous commands\r\n     * annyang.init(commands2, false);\r\n     * ````\r\n     * As of v1.1.0 it is no longer required to call init(). Just start() listening whenever you want, and addCommands() whenever, and as often as you like.\r\n     *\r\n     * @param {Object} commands - Commands that annyang should listen to\r\n     * @param {boolean} [resetCommands=true] - Remove all commands before initializing?\r\n     * @method init\r\n     * @deprecated\r\n     * @see [Commands Object](#commands-object)\r\n     */\r\n    init: function(commands, resetCommands = true) {\r\n      // Abort previous instances of recognition already running\r\n      if (recognition && recognition.abort) {\r\n        recognition.abort();\r\n      }\r\n\r\n      // initiate SpeechRecognition\r\n      recognition = new SpeechRecognition();\r\n\r\n      // Set the max number of alternative transcripts to try and match with a command\r\n      recognition.maxAlternatives = 5;\r\n\r\n      // In HTTPS, turn off continuous mode for faster results.\r\n      // In HTTP,  turn on  continuous mode for much slower results, but no repeating security notices\r\n      recognition.continuous = root.location.protocol === 'http:';\r\n\r\n      // Sets the language to the default 'en-US'. This can be changed with annyang.setLanguage()\r\n      recognition.lang = 'en-US';\r\n\r\n      recognition.onstart = function() {\r\n        isListening = true;\r\n        invokeCallbacks(callbacks.start);\r\n      };\r\n\r\n      recognition.onsoundstart = function() {\r\n        invokeCallbacks(callbacks.soundstart);\r\n      };\r\n\r\n      recognition.onerror = function(event) {\r\n        invokeCallbacks(callbacks.error, event);\r\n        switch (event.error) {\r\n        case 'network':\r\n          invokeCallbacks(callbacks.errorNetwork, event);\r\n          break;\r\n        case 'not-allowed':\r\n        case 'service-not-allowed':\r\n          // if permission to use the mic is denied, turn off auto-restart\r\n          autoRestart = false;\r\n          // determine if permission was denied by user or automatically.\r\n          if (new Date().getTime()-lastStartedAt < 200) {\r\n            invokeCallbacks(callbacks.errorPermissionBlocked, event);\r\n          } else {\r\n            invokeCallbacks(callbacks.errorPermissionDenied, event);\r\n          }\r\n          break;\r\n        }\r\n      };\r\n\r\n      recognition.onend = function() {\r\n        isListening = false;\r\n        invokeCallbacks(callbacks.end);\r\n        // annyang will auto restart if it is closed automatically and not by user action.\r\n        if (autoRestart) {\r\n          // play nicely with the browser, and never restart annyang automatically more than once per second\r\n          var timeSinceLastStart = new Date().getTime()-lastStartedAt;\r\n          autoRestartCount += 1;\r\n          if (autoRestartCount % 10 === 0) {\r\n            if (debugState) {\r\n              logMessage('Speech Recognition is repeatedly stopping and starting. See http://is.gd/annyang_restarts for tips.');\r\n            }\r\n          }\r\n          if (timeSinceLastStart < 1000) {\r\n            setTimeout(function() {\r\n              annyang.start({ paused: pauseListening });\r\n            }, 1000-timeSinceLastStart);\r\n          } else {\r\n            annyang.start({ paused: pauseListening });\r\n          }\r\n        }\r\n      };\r\n\r\n      recognition.onresult = function(event) {\r\n        if(pauseListening) {\r\n          if (debugState) {\r\n            logMessage('Speech heard, but annyang is paused');\r\n          }\r\n          return false;\r\n        }\r\n\r\n        // Map the results to an array\r\n        var SpeechRecognitionResult = event.results[event.resultIndex];\r\n        var results = [];\r\n        for (let k = 0; k<SpeechRecognitionResult.length; k++) {\r\n          results[k] = SpeechRecognitionResult[k].transcript;\r\n        }\r\n\r\n        parseResults(results);\r\n      };\r\n\r\n      // build commands list\r\n      if (resetCommands) {\r\n        commandsList = [];\r\n      }\r\n      if (commands.length) {\r\n        this.addCommands(commands);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Start listening.\r\n     * It's a good idea to call this after adding some commands first, but not mandatory.\r\n     *\r\n     * Receives an optional options object which supports the following options:\r\n     *\r\n     * - `autoRestart`  (boolean, default: true) Should annyang restart itself if it is closed indirectly, because of silence or window conflicts?\r\n     * - `continuous`   (boolean) Allow forcing continuous mode on or off. Annyang is pretty smart about this, so only set this if you know what you're doing.\r\n     * - `paused`       (boolean, default: true) Start annyang in paused mode.\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * // Start listening, don't restart automatically\r\n     * annyang.start({ autoRestart: false });\r\n     * // Start listening, don't restart automatically, stop recognition after first phrase recognized\r\n     * annyang.start({ autoRestart: false, continuous: false });\r\n     * ````\r\n     * @param {Object} [options] - Optional options.\r\n     * @method start\r\n     */\r\n    start: function(options) {\r\n      initIfNeeded();\r\n      options = options || {};\r\n      if (options.paused !== undefined) {\r\n        pauseListening = !!options.paused;\r\n      } else {\r\n        pauseListening = false;\r\n      }\r\n      if (options.autoRestart !== undefined) {\r\n        autoRestart = !!options.autoRestart;\r\n      } else {\r\n        autoRestart = true;\r\n      }\r\n      if (options.continuous !== undefined) {\r\n        recognition.continuous = !!options.continuous;\r\n      }\r\n\r\n      lastStartedAt = new Date().getTime();\r\n      try {\r\n        recognition.start();\r\n      } catch(e) {\r\n        if (debugState) {\r\n          logMessage(e.message);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Stop listening, and turn off mic.\r\n     *\r\n     * Alternatively, to only temporarily pause annyang responding to commands without stopping the SpeechRecognition engine or closing the mic, use pause() instead.\r\n     * @see [pause()](#pause)\r\n     *\r\n     * @method abort\r\n     */\r\n    abort: function() {\r\n      autoRestart = false;\r\n      autoRestartCount = 0;\r\n      if (isInitialized()) {\r\n        recognition.abort();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Pause listening. annyang will stop responding to commands (until the resume or start methods are called), without turning off the browser's SpeechRecognition engine or the mic.\r\n     *\r\n     * Alternatively, to stop the SpeechRecognition engine and close the mic, use abort() instead.\r\n     * @see [abort()](#abort)\r\n     *\r\n     * @method pause\r\n     */\r\n    pause: function() {\r\n      pauseListening = true;\r\n    },\r\n\r\n    /**\r\n     * Resumes listening and restores command callback execution when a result matches.\r\n     * If SpeechRecognition was aborted (stopped), start it.\r\n     *\r\n     * @method resume\r\n     */\r\n    resume: function() {\r\n      annyang.start();\r\n    },\r\n\r\n    /**\r\n     * Turn on output of debug messages to the console. Ugly, but super-handy!\r\n     *\r\n     * @param {boolean} [newState=true] - Turn on/off debug messages\r\n     * @method debug\r\n     */\r\n    debug: function(newState = true) {\r\n      debugState = !!newState;\r\n    },\r\n\r\n    /**\r\n     * Set the language the user will speak in. If this method is not called, defaults to 'en-US'.\r\n     *\r\n     * @param {String} language - The language (locale)\r\n     * @method setLanguage\r\n     * @see [Languages](https://github.com/TalAter/annyang/blob/master/docs/FAQ.md#what-languages-are-supported)\r\n     */\r\n    setLanguage: function(language) {\r\n      initIfNeeded();\r\n      recognition.lang = language;\r\n    },\r\n\r\n    /**\r\n     * Add commands that annyang will respond to. Similar in syntax to init(), but doesn't remove existing commands.\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * var commands = {'hello :name': helloFunction, 'howdy': helloFunction};\r\n     * var commands2 = {'hi': helloFunction};\r\n     *\r\n     * annyang.addCommands(commands);\r\n     * annyang.addCommands(commands2);\r\n     * // annyang will now listen to all three commands\r\n     * ````\r\n     *\r\n     * @param {Object} commands - Commands that annyang should listen to\r\n     * @method addCommands\r\n     * @see [Commands Object](#commands-object)\r\n     */\r\n    addCommands: function(commands) {\r\n      var cb;\r\n\r\n      initIfNeeded();\r\n\r\n      for (let phrase in commands) {\r\n        if (commands.hasOwnProperty(phrase)) {\r\n          cb = root[commands[phrase]] || commands[phrase];\r\n          if (typeof cb === 'function') {\r\n            // convert command to regex then register the command\r\n            registerCommand(commandToRegExp(phrase), cb, phrase);\r\n          } else if (typeof cb === 'object' && cb.regexp instanceof RegExp) {\r\n            // register the command\r\n            registerCommand(new RegExp(cb.regexp.source, 'i'), cb.callback, phrase);\r\n          } else {\r\n            if (debugState) {\r\n              logMessage('Can not register command: %c'+phrase, debugStyle);\r\n            }\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove existing commands. Called with a single phrase, array of phrases, or methodically. Pass no params to remove all commands.\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * var commands = {'hello': helloFunction, 'howdy': helloFunction, 'hi': helloFunction};\r\n     *\r\n     * // Remove all existing commands\r\n     * annyang.removeCommands();\r\n     *\r\n     * // Add some commands\r\n     * annyang.addCommands(commands);\r\n     *\r\n     * // Don't respond to hello\r\n     * annyang.removeCommands('hello');\r\n     *\r\n     * // Don't respond to howdy or hi\r\n     * annyang.removeCommands(['howdy', 'hi']);\r\n     * ````\r\n     * @param {String|Array|Undefined} [commandsToRemove] - Commands to remove\r\n     * @method removeCommands\r\n     */\r\n    removeCommands: function(commandsToRemove) {\r\n      if (commandsToRemove === undefined) {\r\n        commandsList = [];\r\n      } else {\r\n        commandsToRemove = Array.isArray(commandsToRemove) ? commandsToRemove : [commandsToRemove];\r\n        commandsList = commandsList.filter(command => {\r\n          for (let i = 0; i<commandsToRemove.length; i++) {\r\n            if (commandsToRemove[i] === command.originalPhrase) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Add a callback function to be called in case one of the following events happens:\r\n     *\r\n     * * `start` - Fired as soon as the browser's Speech Recognition engine starts listening\r\n     * * `soundstart` - Fired as soon as any sound (possibly speech) has been detected.\r\n     *     This will fire once per Speech Recognition starting. See https://is.gd/annyang_sound_start\r\n     * * `error` - Fired when the browser's Speech Recogntion engine returns an error, this generic error callback will be followed by more accurate error callbacks (both will fire if both are defined)\r\n     *     Callback function will be called with the error event as the first argument\r\n     * * `errorNetwork` - Fired when Speech Recognition fails because of a network error\r\n     *     Callback function will be called with the error event as the first argument\r\n     * * `errorPermissionBlocked` - Fired when the browser blocks the permission request to use Speech Recognition.\r\n     *     Callback function will be called with the error event as the first argument\r\n     * * `errorPermissionDenied` - Fired when the user blocks the permission request to use Speech Recognition.\r\n     *     Callback function will be called with the error event as the first argument\r\n     * * `end` - Fired when the browser's Speech Recognition engine stops\r\n     * * `result` - Fired as soon as some speech was identified. This generic callback will be followed by either the `resultMatch` or `resultNoMatch` callbacks.\r\n     *     Callback functions for to this event will be called with an array of possible phrases the user said as the first argument\r\n     * * `resultMatch` - Fired when annyang was able to match between what the user said and a registered command\r\n     *     Callback functions for this event will be called with three arguments in the following order:\r\n     *       * The phrase the user said that matched a command\r\n     *       * The command that was matched\r\n     *       * An array of possible alternative phrases the user might have said\r\n     * * `resultNoMatch` - Fired when what the user said didn't match any of the registered commands.\r\n     *     Callback functions for this event will be called with an array of possible phrases the user might've said as the first argument\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * annyang.addCallback('error', function() {\r\n     *   $('.myErrorText').text('There was an error!');\r\n     * });\r\n     *\r\n     * annyang.addCallback('resultMatch', function(userSaid, commandText, phrases) {\r\n     *   console.log(userSaid); // sample output: 'hello'\r\n     *   console.log(commandText); // sample output: 'hello (there)'\r\n     *   console.log(phrases); // sample output: ['hello', 'halo', 'yellow', 'polo', 'hello kitty']\r\n     * });\r\n     *\r\n     * // pass local context to a global function called notConnected\r\n     * annyang.addCallback('errorNetwork', notConnected, this);\r\n     * ````\r\n     * @param {String} type - Name of event that will trigger this callback\r\n     * @param {Function} callback - The function to call when event is triggered\r\n     * @param {Object} [context] - Optional context for the callback function\r\n     * @method addCallback\r\n     */\r\n    addCallback: function(type, callback, context) {\r\n      var cb = root[callback] || callback;\r\n      if (typeof cb === 'function' && callbacks[type] !== undefined) {\r\n        callbacks[type].push({callback: cb, context: context || this});\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove callbacks from events.\r\n     *\r\n     * - Pass an event name and a callback command to remove that callback command from that event type.\r\n     * - Pass just an event name to remove all callback commands from that event type.\r\n     * - Pass undefined as event name and a callback command to remove that callback command from all event types.\r\n     * - Pass no params to remove all callback commands from all event types.\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * annyang.addCallback('start', myFunction1);\r\n     * annyang.addCallback('start', myFunction2);\r\n     * annyang.addCallback('end', myFunction1);\r\n     * annyang.addCallback('end', myFunction2);\r\n     *\r\n     * // Remove all callbacks from all events:\r\n     * annyang.removeCallback();\r\n     *\r\n     * // Remove all callbacks attached to end event:\r\n     * annyang.removeCallback('end');\r\n     *\r\n     * // Remove myFunction2 from being called on start:\r\n     * annyang.removeCallback('start', myFunction2);\r\n     *\r\n     * // Remove myFunction1 from being called on all events:\r\n     * annyang.removeCallback(undefined, myFunction1);\r\n     * ````\r\n     *\r\n     * @param type Name of event type to remove callback from\r\n     * @param callback The callback function to remove\r\n     * @returns undefined\r\n     * @method removeCallback\r\n     */\r\n    removeCallback: function(type, callback) {\r\n      var compareWithCallbackParameter = function(cb) {\r\n        return cb.callback !== callback;\r\n      };\r\n      // Go over each callback type in callbacks store object\r\n      for (let callbackType in callbacks) {\r\n        if (callbacks.hasOwnProperty(callbackType)) {\r\n          // if this is the type user asked to delete, or he asked to delete all, go ahead.\r\n          if (type === undefined || type === callbackType) {\r\n            // If user asked to delete all callbacks in this type or all types\r\n            if (callback === undefined) {\r\n              callbacks[callbackType] = [];\r\n            } else {\r\n              // Remove all matching callbacks\r\n              callbacks[callbackType] = callbacks[callbackType].filter(compareWithCallbackParameter);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns true if speech recognition is currently on.\r\n     * Returns false if speech recognition is off or annyang is paused.\r\n     *\r\n     * @return boolean true = SpeechRecognition is on and annyang is listening\r\n     * @method isListening\r\n     */\r\n    isListening: function() {\r\n      return isListening && !pauseListening;\r\n    },\r\n\r\n    /**\r\n     * Returns the instance of the browser's SpeechRecognition object used by annyang.\r\n     * Useful in case you want direct access to the browser's Speech Recognition engine.\r\n     *\r\n     * @returns SpeechRecognition The browser's Speech Recognizer currently used by annyang\r\n     * @method getSpeechRecognizer\r\n     */\r\n    getSpeechRecognizer: function() {\r\n      return recognition;\r\n    },\r\n\r\n    /**\r\n     * Simulate speech being recognized. This will trigger the same events and behavior as when the Speech Recognition\r\n     * detects speech.\r\n     *\r\n     * Can accept either a string containing a single sentence, or an array containing multiple sentences to be checked\r\n     * in order until one of them matches a command (similar to the way Speech Recognition Alternatives are parsed)\r\n     *\r\n     * #### Examples:\r\n     * ````javascript\r\n     * annyang.trigger('Time for some thrilling heroics');\r\n     * annyang.trigger(\r\n     *     ['Time for some thrilling heroics', 'Time for some thrilling aerobics']\r\n     *   );\r\n     * ````\r\n     *\r\n     * @param string|array sentences A sentence as a string or an array of strings of possible sentences\r\n     * @returns undefined\r\n     * @method trigger\r\n     */\r\n    trigger: function(sentences) {\r\n      if(!annyang.isListening()) {\r\n        if (debugState) {\r\n          if (!isListening) {\r\n            logMessage('Cannot trigger while annyang is aborted');\r\n          } else {\r\n            logMessage('Speech heard, but annyang is paused');\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!Array.isArray(sentences)) {\r\n        sentences = [sentences];\r\n      }\r\n\r\n      parseResults(sentences);\r\n    }\r\n  };\r\n\r\n  return annyang;\r\n\r\n}));\r\n\r\n/**\r\n * # Good to Know\r\n *\r\n * ## Commands Object\r\n *\r\n * Both the [init()]() and addCommands() methods receive a `commands` object.\r\n *\r\n * annyang understands commands with `named variables`, `splats`, and `optional words`.\r\n *\r\n * * Use `named variables` for one word arguments in your command.\r\n * * Use `splats` to capture multi-word text at the end of your command (greedy).\r\n * * Use `optional words` or phrases to define a part of the command as optional.\r\n *\r\n * #### Examples:\r\n * ````html\r\n * <script>\r\n * var commands = {\r\n *   // annyang will capture anything after a splat (*) and pass it to the function.\r\n *   // e.g. saying \"Show me Batman and Robin\" will call showFlickr('Batman and Robin');\r\n *   'show me *tag': showFlickr,\r\n *\r\n *   // A named variable is a one word variable, that can fit anywhere in your command.\r\n *   // e.g. saying \"calculate October stats\" will call calculateStats('October');\r\n *   'calculate :month stats': calculateStats,\r\n *\r\n *   // By defining a part of the following command as optional, annyang will respond\r\n *   // to both: \"say hello to my little friend\" as well as \"say hello friend\"\r\n *   'say hello (to my little) friend': greeting\r\n * };\r\n *\r\n * var showFlickr = function(tag) {\r\n *   var url = 'http://api.flickr.com/services/rest/?tags='+tag;\r\n *   $.getJSON(url);\r\n * }\r\n *\r\n * var calculateStats = function(month) {\r\n *   $('#stats').text('Statistics for '+month);\r\n * }\r\n *\r\n * var greeting = function() {\r\n *   $('#greeting').text('Hello!');\r\n * }\r\n * </script>\r\n * ````\r\n *\r\n * ### Using Regular Expressions in commands\r\n * For advanced commands, you can pass a regular expression object, instead of\r\n * a simple string command.\r\n *\r\n * This is done by passing an object containing two properties: `regexp`, and\r\n * `callback` instead of the function.\r\n *\r\n * #### Examples:\r\n * ````javascript\r\n * var calculateFunction = function(month) { console.log(month); }\r\n * var commands = {\r\n *   // This example will accept any word as the \"month\"\r\n *   'calculate :month stats': calculateFunction,\r\n *   // This example will only accept months which are at the start of a quarter\r\n *   'calculate :quarter stats': {'regexp': /^calculate (January|April|July|October) stats$/, 'callback': calculateFunction}\r\n * }\r\n ````\r\n *\r\n */\r\n"]}